name: Release Candidate

on:
  #workflow_run:
  #  workflows: [CI]
  #  types: [completed]
  #  branches:
  #    - release-candidate
  push:

permissions:
  contents: read

env:
  PACKAGE_NAME: rusty_logger

jobs:
  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  build:
    name: build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    # only run on push to main and on release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
            interpreter: 3.9 3.10 3.11
          - os: windows
            ls: dir
            target: i686
            python-architecture: x86
            interpreter: 3.9 3.10 3.11
          # no win arm 
          #- os: windows
          #  ls: dir
          #  target: aarch64
          #  interpreter: 3.11
          - os: macos
            target: aarch64
            interpreter: 3.9 3.10 3.11
          - os: ubuntu
            platform: linux
            target: i686
          - os: ubuntu
            platform: linux
            target: aarch64

          - os: ubuntu
            platform: linux
            target: armv7
            interpreter: 3.9 3.10 3.11
          # musllinux
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: ppc64le
            interpreter: 3.9 3.10 3.11
          - os: ubuntu
            platform: linux
            target: s390x
            interpreter: 3.9 3.10 3.11
        exclude:
          - os: ubuntu
            target: x86_64
            manylinux: auto
          - os: windows
            target: x86_64
          - os: windows
            target: aarch64

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - run: pip install -U twine 'black>=22.3.0,<23' typing_extensions

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          container: ${{ matrix.container }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.9 3.10 3.11' }} ${{ matrix.extra-build-args }}
          rust-toolchain: stable
          docker-options: -e CI

      - run: ${{ matrix.ls || 'ls -lh' }} dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  inspect-pypi-assets:
    needs: [build, build-sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - name: list dist files
        run: |
         ls -lh dist/
         ls -l dist/
         echo "`ls dist | wc -l` files"

      - name: extract and list sdist file
        run: |
         mkdir sdist-files
         tar -xvf dist/*.tar.gz -C sdist-files
         tree -a sdist-files

      - name: extract and list wheel file
        run: |
         ls dist/*cp310-manylinux*x86_64.whl | head -n 1
         python -m zipfile --list `ls dist/*cp310-manylinux*x86_64.whl | head -n 1`

  test-builds-arch:
    name: test build on ${{ matrix.target }}-${{ matrix.distro }}
    needs: [build]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target: [aarch64, armv7, s390x, ppc64le]
        distro: ['ubuntu22.04']
        include:
          - target: aarch64
            distro: alpine_latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - uses: uraimo/run-on-arch-action@v2.5.1
        name: install & test
        with:
          arch: ${{ matrix.target }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          install: |
            set -x
            if command -v apt-get &> /dev/null; then
              echo "installing python & pip with apt-get..."
              apt-get update
              apt-get install -y --no-install-recommends python3 python3-pip python3-venv
            else
              echo "installing python & pip with apk..."
              apk update
              apk add python3 py3-pip
            fi
          run: |
            set -x
            python3 -m venv venv
            source venv/bin/activate
            python3 -m pip install poetry==1.5.1
            python3 -m poetry install --all-extras --with dev
            python3 -m poetry add rusty_logger --no-index --no-deps --find-links dist --force-reinstall
            python3 -m poetry run pytest
            python3 -c 'import rusty_logger; print(rusty_logger.__version__)'

  test-builds-os:
    name: test build on ${{ matrix.os }}
    needs: [build, build-pgo]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install poetry
        run: pipx install poetry==${{ matrix.poetry-version }}

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create virtual environment
        run: |
          python -m venv .venv
          echo "$GITHUB_WORKSPACE/rusty-logger/.venv/bin" >> $GITHUB_PATH

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: poetry install --all-extras --with dev
      - run: poetry add rusty_logger --no-index --no-deps --find-links dist --force-reinstall
      - run: poetry run pytest