name: Release

on:
  release:
    types: [published]

permissions:
  contents: read

env:
  PACKAGE_NAME: rusty_logger
  INTERPRETER: "3.10 3.11 3.12 3.13 pypy3.10"
  RUSTFLAGS: -C debuginfo=0

jobs:
  rust-release:
    environment: crates.io
    name: Release-Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
      - name: cache rust
        id: cargo_release_cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-release
      - name: Switch to main branch
        run: git checkout main
      - name: Run release-plz
        uses: MarcoIeni/release-plz-action@v0.5
        with:
          command: release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_REGISTRY_TOKEN }}
  #est-python:
  # name: test ${{ matrix.os }}-${{ matrix.python-version }}

  # strategy:
  #   fail-fast: false
  #   matrix:
  #     os: [ubuntu, macos]
  #     python-version: ["3.10", "3.11", "3.12"]

  # runs-on: ${{ matrix.os }}-latest
  # steps:
  #   - uses: actions/checkout@v4

  #   - name: install rust stable
  #     uses: dtolnay/rust-toolchain@stable

  #   - name: cache rust
  #     uses: Swatinem/rust-cache@v2
  #     with:
  #       key: ${{ matrix.os }}-${{ matrix.python-version }}-v1

  #   - name: Install uv
  #     uses: astral-sh/setup-uv@v4
  #     with:
  #       enable-cache: true

  #   - name: set up python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Create virtual environment
  #     working-directory: ./py-logger
  #     run: make setup.project

  #   - name: Lints
  #     working-directory: ./py-logger
  #     run: make lints.ci

  #   - name: Run tests and report coverage
  #     working-directory: ./py-logger
  #     run: make test.unit

  #uild-sdist:
  # needs: [test-python]
  # runs-on: ubuntu-latest
  # steps:
  #   - uses: actions/checkout@v4
  #   - name: Build sdist
  #     uses: PyO3/maturin-action@v1
  #     with:
  #       command: sdist
  #       args: --out dist
  #       rust-toolchain: stable
  #       working-directory: ./py-logger

  #   - name: Upload sdist
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: wheels
  #       path: ./py-logger/dist

  #uild-ubuntu:
  # needs: [test-python]
  # name: build - ubuntu - ${{ matrix.manylinux }} - ${{ matrix.target }}
  # strategy:
  #   fail-fast: false
  #   matrix:
  #     target: [x86_64, x86, aarch64, armv7, s390x, ppc64le]
  #     manylinux: [auto]

  # runs-on: ubuntu-latest
  # steps:
  #   - uses: actions/checkout@v4

  #   - name: set up python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: "3.12"

  #   - run: pip install -U twine 'black>=22.3.0,<23' typing_extensions

  #   - name: build wheels
  #     uses: PyO3/maturin-action@v1
  #     with:
  #       target: ${{ matrix.target }}
  #       manylinux: ${{ matrix.manylinux }}
  #       args: --release --out dist --interpreter ${{ env.INTERPRETER }}
  #       rust-toolchain: stable
  #       docker-options: -e CI
  #       working-directory: ./py-logger

  #   - run: ls -lh dist/

  #   - run: twine check --strict dist/*

  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: pypi_files
  #       path: ./py-logger/dist

  #uild-ubuntu-musllinux:
  # needs: [test-python]
  # name: build - ubuntu - ${{ matrix.manylinux }} - ${{ matrix.target }}
  # strategy:
  #   fail-fast: false
  #   matrix:
  #     target: [x86_64, aarch64]
  #     manylinux: ["musllinux_1_1"]

  # runs-on: ubuntu-latest
  # steps:
  #   - uses: actions/checkout@v4

  #   - name: set up python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: "3.12"

  #   - run: pip install -U twine 'black>=22.3.0,<23' typing_extensions

  #   - name: build wheels
  #     uses: PyO3/maturin-action@v1
  #     with:
  #       target: ${{ matrix.target }}
  #       manylinux: ${{ matrix.manylinux }}
  #       args: --release --out dist --interpreter ${{ env.INTERPRETER }}
  #       rust-toolchain: stable
  #       docker-options: -e CI
  #       working-directory: ./py-logger

  #   - run: ls -lh dist/

  #   - run: twine check --strict dist/*

  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: pypi_files
  #       path: ./py-logger/dist

  #uild-macos:
  # needs: [test-python]
  # name: build - macos - (${{ matrix.target }} - auto
  # strategy:
  #   fail-fast: false
  #   matrix:
  #     target: [x86_64, aarch64]

  # runs-on: macos-latest
  # steps:
  #   - uses: actions/checkout@v4

  #   - name: set up python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: "3.12"

  #   - run: pip install -U twine 'black>=22.3.0,<23' typing_extensions

  #   - name: build wheels
  #     uses: PyO3/maturin-action@v1
  #     with:
  #       target: ${{ matrix.target }}
  #       args: --release --out dist --interpreter ${{ env.INTERPRETER }}
  #       rust-toolchain: stable
  #       docker-options: -e CI
  #       working-directory: ./py-logger

  #   - run: ls -lh ./py-logger/dist/

  #   - run: twine check --strict ./py-logger/dist/*

  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: pypi_files
  #       path: ./py-logger/dist

  #uild-windows:
  # needs: [test-python]
  # name: build - windows - (${{ matrix.target }} - auto
  # strategy:
  #   fail-fast: false
  #   matrix:
  #     target: [x64, x86]
  #     include:
  #       - target: i686
  #         python-architecture: x86
  #         interpreter: 3.10 3.11 3.12 3.13
  #       - target: x64
  #         python-architecture: x64
  #         interpreter: 3.10 3.11 3.12 3.13
  #       - target: x86
  #         python-architecture: x86
  #         interpreter: 3.10 3.11 3.12 3.13
  #     exclude:
  #       - target: x86
  #       - target: x64

  # runs-on: windows-latest
  # steps:
  #   - uses: actions/checkout@v4

  #   - name: set up python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: "3.12"
  #       architecture: ${{ matrix.python-architecture }}

  #   - run: pip install -U twine 'black>=22.3.0,<23' typing_extensions

  #   - name: build wheels
  #     uses: PyO3/maturin-action@v1
  #     with:
  #       target: ${{ matrix.target }}
  #       args: --release --out dist --interpreter ${{ matrix.interpreter || env.INTERPRETER }}
  #       rust-toolchain: stable
  #       working-directory: ./py-logger

  #   - run: dir dist/

  #   - run: twine check --strict ./py-logger/dist/*

  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: pypi_files
  #       path: ./py-logger/dist

  #nspect-pypi-assets:
  # needs:
  #   [
  #     build-ubuntu,
  #     build-ubuntu-musllinux,
  #     build-macos,
  #     build-windows,
  #     build-sdist,
  #   ]
  # runs-on: ubuntu-latest

  # steps:
  #   - uses: actions/checkout@v4

  #   - name: get dist artifacts
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: pypi_files
  #       path: dist

  #   - name: list dist files
  #     run: |
  #       ls -lh dist/
  #       ls -l dist/
  #       echo "`ls dist | wc -l` files"

  #elease:
  # name: Release
  # runs-on: ubuntu-latest
  # needs: [inspect-pypi-assets]

  # steps:
  #   - uses: actions/checkout@v4

  #   - name: install rust stable
  #     uses: dtolnay/rust-toolchain@stable
  #   - run: |
  #       export VERSION=$(cargo pkgid | cut -d "#" -f2)
  #       echo "version: $VERSION"
  #       echo "tag: $GITHUB_REF_NAME"
  #       test "v$VERSION" "=" "$GITHUB_REF_NAME"

  #   - name: set up python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: "3.10"

  #   - run: pip install -U twine

  #   - name: get dist artifacts
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: pypi_files
  #       path: dist

  #   - run: twine check --strict dist/*

  #   - name: upload to pypi
  #     run: twine upload dist/*
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
